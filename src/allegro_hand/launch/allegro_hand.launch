<launch>
  <!--
       Required arguments:
          HAND:=right|left
       Suggested arguments:
          NUM:=0|1|...
          RESPAWN:=true|false   Respawn controller if it dies.
          AUTO_CAN:=true|false  (if true, ignores CAN_DEVICE argument and finds the can device automagically).
          CAN_DEVICE:=/dev/pcanusb1 | /dev/pcanusbNNN  (ls -l /dev/pcan* to see open CAN devices)
          VISUALIZE:=true|false  (Launch rviz)
          GAZEBO:=true|false

       NOTE: If you specify the can device manually (CAN_DEVICE:=/dev/pcanusbN),
             make sure you *also* specify AUTO_CAN:=false.
  -->


  <arg name="HAND" doc="left or right"/>
  <arg name="NUM" default="0"/>
  <arg name="GAZEBO" default="false"/>

  <!-- Visualization with rviz, only if arg VISUALIZE is set to true. Default is
       false, the allegro_viz.launch can be started separated. -->
  <arg name ="VISUALIZE" default="true" />
  <include file="$(find allegro_hand)/launch/allegro_viz.launch"
           if="$(arg VISUALIZE)">
    <arg name="NUM" value="$(arg NUM)"/>
  </include>

  <arg name="POLLING" default="true"/> <!-- true, false for polling the CAN communication -->

  <!-- ls -l /dev/pcan* to see your open CAN ports. Auto means find it
       automatically, and ignores the CAN_DEVICE argument. -->
  <arg name="AUTO_CAN" default="true" />
  <arg name="CAN_DEVICE" default="/dev/pcanusb1" />

  <!--If true, respawn the controller if it dies. -->
  <arg name="RESPAWN" default="false"/>

  <!--Arbitrary name for this particular hand. -->
  <arg name="hand_name" value="allegro_hand_$(arg HAND)_$(arg NUM)"/>

  <!-- Load the robot description directly from the xacro file. (NOTE: store it
       in two parameter names.) -->
  <param name="robot_description"
         command="$(find xacro)/xacro
                  $(find allegro_hand)/urdf/allegro_hand_on_stand.urdf.xacro
                  chirality:=$(arg HAND)
                  prefix:=$(arg HAND)_hand"/>

  <!-- Allegro Hand controller and communication node. -->
  <node unless="$(arg GAZEBO)"
        name="allegro_node"
        pkg="allegro_hand_controllers"
        type="allegro_node"
        output="screen"
        clear_params="true"
        respawn="$(arg RESPAWN)"
        respawn_delay="2"
        args="$(arg POLLING)"
        ns="/$(arg hand_name)">

    <!-- Set the CAN channel automatically (using detect_pcan.py) if the
         AUTO_CAN parameter is true, otherwise use the CAN_DEVICE
         argument. NOTE: To manually set the can device, you must *also* set
         AUTO_CAN:=false. -->
    <param name="/comm/CAN_CH" value="$(arg CAN_DEVICE)"
           unless="$(arg AUTO_CAN)" />
    <param name="/comm/CAN_CH"
           command="$(find allegro_hand_driver)/scripts/detect_pcan.py"
           if="$(arg AUTO_CAN)" />

    <param name="/hand_info/which_hand" value="$(arg HAND)" /> <!-- See HAND arg above -->
  </node>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include if="$(arg GAZEBO)" file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find allegro_hand_description)/worlds/allegro.world"/>
    <arg name="debug" value="false" />
    <arg name="paused" value="true"/>
    <arg name="physics" value="dart"/>
  </include>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node if="$(arg GAZEBO)" name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
  args="-urdf -model $(arg hand_name) -param robot_description"/>

  <include file="$(find allegro_hand_controllers)/launch/allegro_hand_controllers.launch">
     <arg name="hand_name" value="$(arg HAND)_hand"/>
  </include>

  <!-- Joint States (angles) to Joint Transforms -->
  <node name="jointState2tf_$(arg NUM)" pkg="robot_state_publisher" type="robot_state_publisher">
    <remap from="joint_states" to="$(arg hand_name)/joint_states"/>
  </node>

</launch>
